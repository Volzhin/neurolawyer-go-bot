"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from app.utils.logging import get_logger
from app.services.prefs import PreferencesService
from app.services.webhook_client import WebhookClient
from app.utils.env import config

logger = get_logger(__name__)
router = Router()

prefs_service = PreferencesService()
webhook_client = WebhookClient()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å
    current_service = prefs_service.get_user_service(user_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"üöó Drive {'‚úÖ' if current_service == 'drive' else ''}",
                callback_data="service_drive"
            ),
            InlineKeyboardButton(
                text=f"üõµ Samokaty {'‚úÖ' if current_service == 'samokaty' else ''}",
                callback_data="service_samokaty"
            )
        ],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {username}!

–Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏—Ö –Ω–∞ –≤–µ–±—Ö—É–∫–∏.

üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:
‚Ä¢ üì∏ –§–æ—Ç–æ (–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ —Å—Ä–∞–∑—É)

üéØ –¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å: {current_service.title()}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤!"""
    
    await message.answer(text, reply_markup=keyboard)
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    text = """‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É

üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤:
‚Ä¢ üì∏ –§–æ—Ç–æ - –ª—é–±—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ —Å—Ä–∞–∑—É)

üì¶ –ê–ª—å–±–æ–º—ã —Ñ–æ—Ç–æ: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ–¥—Ä—è–¥ - –æ–Ω–∏ –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–∏–Ω –ø–∞–∫–µ—Ç.

‚ö° Burst-—Ä–µ–∂–∏–º: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø–æ–¥—Ä—è–¥ - –æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏—Ç—ã –Ω–∞ –ø–∞–∫–µ—Ç—ã.

üîß –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ /service - –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å
‚Ä¢ /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤, –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–µ–±—Ö—É–∫!"""
    
    await message.answer(text)
    logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")

@router.message(Command("service"))
async def cmd_service(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /service."""
    user_id = message.from_user.id
    current_service = prefs_service.get_user_service(user_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"üöó Drive {'‚úÖ' if current_service == 'drive' else ''}",
                callback_data="service_drive"
            ),
            InlineKeyboardButton(
                text=f"üõµ Samokaty {'‚úÖ' if current_service == 'samokaty' else ''}",
                callback_data="service_samokaty"
            )
        ]
    ])
    
    text = f"""üîß –í—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞

–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å: {current_service.title()}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤:
‚Ä¢ üöó Drive - –¥–ª—è —Ñ–∞–π–ª–æ–≤ Drive
‚Ä¢ üõµ Samokaty - –¥–ª—è —Ñ–∞–π–ª–æ–≤ Samokaty"""
    
    await message.answer(text, reply_markup=keyboard)
    logger.info(f"üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞")

@router.message(Command("status"))
async def cmd_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status."""
    user_id = message.from_user.id
    current_service = prefs_service.get_user_service(user_id)
    
    webhook_url = config.get_webhook_url(current_service)
    if not webhook_url:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL –≤–µ–±—Ö—É–∫–∞")
        return
    
    await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞...")
    
    success = await webhook_client.send_ping(webhook_url)
    
    if success:
        await message.answer(f"‚úÖ –í–µ–±—Ö—É–∫ {current_service.title()} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        await message.answer(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–µ–±—Ö—É–∫–æ–º {current_service.title()}")
    
    logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–≤–µ—Ä–∏–ª —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞ {current_service}")


@router.callback_query(F.data.startswith("service_"))
async def callback_service(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞."""
    user_id = callback.from_user.id
    service = callback.data.split("_")[1]
    
    prefs_service.set_user_service(user_id, service)
    
    await callback.message.edit_text(
        f"‚úÖ –°–µ—Ä–≤–∏—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ **{service.title()}**\n\n–¢–µ–ø–µ—Ä—å –≤—Å–µ –∫—Ä–µ–∞—Ç–∏–≤—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –≤–µ–±—Ö—É–∫.",
        reply_markup=None
    )
    
    await callback.answer(f"–°–µ—Ä–≤–∏—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {service.title()}")
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —Å–µ—Ä–≤–∏—Å –Ω–∞ {service}")

@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏."""
    await cmd_help(callback.message)
    await callback.answer()
