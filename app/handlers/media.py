"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç–∞."""
import asyncio
import json
import uuid
from typing import Dict, List, Set
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message
from app.utils.logging import get_logger
from app.services.tg_files import TelegramFileService
from app.services.webhook_client import WebhookClient
from app.services.prefs import PreferencesService
from app.models.payload import WebhookPayload, Creative, ChatInfo, UserInfo, MessageInfo, BatchInfo
from app.utils.env import config

logger = get_logger(__name__)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è burst-—Ä–µ–∂–∏–º–æ–º
user_buffers: Dict[int, List[Message]] = {}
user_timers: Dict[int, asyncio.Task] = {}
media_groups: Dict[str, List[Message]] = {}
media_group_timers: Dict[str, asyncio.Task] = {}

# –°–µ—Ä–≤–∏—Å—ã
tg_files_service = TelegramFileService(None)  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main
webhook_client = WebhookClient()
prefs_service = PreferencesService()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ main.py

@router.message(F.media_group_id & F.photo)
async def handle_media_group(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª—å–±–æ–º–æ–≤ —Ñ–æ—Ç–æ (media groups)."""
    media_group_id = message.media_group_id
    user_id = message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    if media_group_id not in media_groups:
        media_groups[media_group_id] = []
    media_groups[media_group_id].append(message)
    
    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    if media_group_id in media_group_timers:
        media_group_timers[media_group_id].cancel()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    timer_task = asyncio.create_task(
        process_media_group_after_delay(media_group_id, user_id)
    )
    media_group_timers[media_group_id] = timer_task
    
    logger.info(f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ –≤ media group {media_group_id}")

async def process_media_group_after_delay(media_group_id: str, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å media group –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏."""
    await asyncio.sleep(1.5)  # –ñ–¥–µ–º 1.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    if media_group_id in media_groups:
        messages = media_groups[media_group_id]
        del media_groups[media_group_id]
        
        if media_group_id in media_group_timers:
            del media_group_timers[media_group_id]
        
        await process_messages_batch(messages, user_id, "media_group")
        
        logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω media group {media_group_id} —Å {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")

@router.message(F.photo & ~F.media_group_id)
async def handle_single_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ (–Ω–µ –≤ media group)."""
    user_id = message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ burst-–±—É—Ñ–µ—Ä
    if user_id not in user_buffers:
        user_buffers[user_id] = []
    
    user_buffers[user_id].append(message)
    
    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_timers:
        user_timers[user_id].cancel()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    timer_task = asyncio.create_task(
        process_user_buffer_after_delay(user_id)
    )
    user_timers[user_id] = timer_task
    
    logger.info(f"üìé –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ –≤ –±—É—Ñ–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def process_user_buffer_after_delay(user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±—É—Ñ–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏."""
    # –ñ–¥–µ–º debounce –≤—Ä–µ–º—è
    await asyncio.sleep(config.BURST_DEBOUNCE_SECS)
    
    if user_id in user_buffers and user_buffers[user_id]:
        messages = user_buffers[user_id].copy()
        user_buffers[user_id] = []
        
        if user_id in user_timers:
            del user_timers[user_id]
        
        await process_messages_batch(messages, user_id, "debounce")
        
        logger.info(f"‚ö° –û–±—Ä–∞–±–æ—Ç–∞–Ω burst –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")

async def process_messages_batch(messages: List[Message], user_id: int, grouping: str):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not messages:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    service = prefs_service.get_user_service(user_id)
    webhook_url = config.get_webhook_url(service)
    
    if not webhook_url:
        await messages[0].answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL –≤–µ–±—Ö—É–∫–∞")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤—ã
    creatives = await tg_files_service.extract_creatives_from_messages(messages)
    
    if not creatives:
        await messages[0].answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫—Ä–µ–∞—Ç–∏–≤—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º download URLs
    download_urls = [creative.download_url for creative in creatives if creative.download_url]
    
    # –°–æ–∑–¥–∞–µ–º batch info
    batch_id = str(uuid.uuid4())
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    max_per_batch = config.MAX_CREATIVES_PER_BATCH
    chunks = [creatives[i:i + max_per_batch] for i in range(0, len(creatives), max_per_batch)]
    
    success_count = 0
    
    for seq, chunk in enumerate(chunks, 1):
        # –°–æ–∑–¥–∞–µ–º payload
        payload = create_webhook_payload(
            messages=messages,
            creatives=chunk,
            download_urls=download_urls,
            service=service,
            batch_id=batch_id,
            seq=seq,
            total=len(chunks),
            grouping=grouping
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–µ–±—Ö—É–∫
        idempotency_key = webhook_client.generate_idempotency_key(batch_id, seq)
        success = await webhook_client.send_payload(payload, webhook_url, idempotency_key)
        
        if success:
            success_count += 1
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º payload –¥–ª—è retry
            prefs_service.save_last_payload(user_id, payload.model_dump_json())
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if success_count == len(chunks):
        await messages[0].answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(creatives)} –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –Ω–∞ {service.title()}")
    else:
        await messages[0].answer(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count}/{len(chunks)} –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ {service.title()}")

def create_webhook_payload(
    messages: List[Message],
    creatives: List[Creative],
    download_urls: List[str],
    service: str,
    batch_id: str,
    seq: int,
    total: int,
    grouping: str
) -> WebhookPayload:
    """–°–æ–∑–¥–∞—Ç—å payload –¥–ª—è –≤–µ–±—Ö—É–∫–∞."""
    first_message = messages[0]
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
    chat_info = ChatInfo(
        chat_id=first_message.chat.id,
        type=first_message.chat.type,
        title=first_message.chat.title
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = UserInfo(
        user_id=first_message.from_user.id,
        username=first_message.from_user.username
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    message_info = MessageInfo(
        message_id=first_message.message_id,
        date_ts=int(first_message.date.timestamp()),
        media_group_id=first_message.media_group_id
    )
    
    # ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    message_ids = [msg.message_id for msg in messages]
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç—á–µ
    batch_info = BatchInfo(
        batch_id=batch_id,
        seq=seq,
        total=total,
        grouping=grouping
    )
    
    return WebhookPayload(
        service=service,
        chat=chat_info,
        from_=user_info,
        message=message_info,
        message_ids=message_ids,
        creatives=creatives,
        download_urls=download_urls,
        batch=batch_info
    )
